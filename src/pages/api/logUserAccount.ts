import type { NextApiRequest, NextApiResponse } from "next"
import { GoogleSpreadsheet } from "google-spreadsheet"
import { JWT } from "google-auth-library"

interface ResponseData {
  message: string
}

interface RequestBody {
  "Display Name": string
  "Profile Picture URL": string
  "Status Message": string
  "User ID"?: string
  "Group ID"?: string
}

const googleSheetId = "1ubvSQltdIf2A96PSSUBOI58U8PAwsX2f3xKlNrlZwYY"

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>,
) {
  try {
    if (req.method !== "POST") return res.status(405).json({ message: "Only POST method allowed" })
    const userData = req.body as RequestBody

    // log user data to sheet
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: process.env.GOOGLE_SERVICE_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY,
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
      ],
    })

    // setup google sheet
    const doc = new GoogleSpreadsheet(googleSheetId, serviceAccountAuth)
    await doc.loadInfo()

    // get the first sheet
    const sheet = await doc.sheetsByIndex[0]

    // get all rows
    const rows = await sheet.getRows()

    const matchingRow = rows.findIndex((item) => {
      const row = item.toObject()
      if (row["User ID"] === userData["User ID"]) return true
      return false
    })

    if (matchingRow === -1) {
      // append value
      await sheet.addRow(userData as unknown as Record<string, string>)
    }

    res.status(200).json({ message: "User Logged!" })
  } catch (err) {
    console.error(err)
    res.status(500).json({ message: "Somethng went wrong" })
  }
}
