import Head from "next/head"
import { useCallback, useEffect, useState } from "react"

export default function Home() {
  const [loading, setLoading] = useState(false)
  const [users, setUsers] = useState<Record<string, string>[]>([])

  // Fetch user data from the API
  const fetchTargetUser = useCallback(async (): Promise<Record<string, string>[]> => {
    try {
      const response = await fetch("/api/getTargetReminder")

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      // Ensure data is returned as an array of objects
      return data["ids"] as Record<string, string>[]
    } catch (err) {
      console.error("Error:", err)
      window.alert("Something went wrong, please contact the developer")

      // Return an empty array to avoid potential undefined issues
      return []
    }
  }, [])

  // Fetch the user data when the component mounts
  useEffect(() => {
    const fetchData = async () => {
      const usersData = await fetchTargetUser()
      setUsers(usersData) // Set the fetched data into state
    }

    fetchData() // Call the fetch function
  }, [fetchTargetUser]) // Dependency array ensures this runs only once on mount

  // Trigger reminder API call
  const triggerReminder = useCallback(async () => {
    if (users.length === 0) {
      window.alert("No users to send reminder.")
      return
    }

    const reqBody = users.map((user) => ({
      lineUserId: user["User/GroupID"],
    }))

    try {
      setLoading(true)
      const response = await fetch("/api/remindPelayanan", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(reqBody), // Send all user IDs
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      await response.json()
      window.alert("Reminder sent successfully")
    } catch (error) {
      console.error("Error:", error)
      window.alert("Something went wrong, please contact the developer")
    } finally {
      setLoading(false)
    }
  }, [users]) // Add `users` as a dependency

  return (
    <div>
      <Head>
        <title>Penatalayan Reminder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          paddingTop: "70px",
          minWidth: "100%",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "center",
        }}
      >
        <button
          className="triggerButton"
          onClick={triggerReminder}
          style={{ cursor: "pointer" }}
          disabled={loading || users.length === 0}
        >
          <h2>{!loading ? "Trigger" : "Loading..."}</h2>
          <p>{!loading ? "Trigger reminder template manually" : "Sending reminder..."}</p>
        </button>
      </div>
      {users.length > 0 && (
        <div style={{ textAlign: "center", marginTop: "20px" }}>
          <h3>Fetched Users:</h3>
          <div>
            {users.map((user, index) => (
              <p key={index}>
                {user["LineDisplayName"]} - {user["User/GroupID"]}
              </p>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}
